Data object.
Data = csvFuturesData() 
Data: FuturesData object with 3 instruments
------------------------------------------------------------

data._get_all_cost_data()returns Data frame of all cost data:
           Instrument  Slippage  PerBlock  Percentage  PerTrade
Instrument                                                     
BUND             BUND    0.0050      2.00           0         0
US10             US10    0.0080      1.51           0         0
EDOLLAR       EDOLLAR    0.0025      2.11           0         0,
type:<class 'pandas.core.frame.DataFrame'>
------------------------------------------------------------

data.get_raw_cost_data(instrument_code='EDOLLAR')
returns Dict of float for a given instrument. Example:
dict_items([('price_slippage', 0.0025000000000000001), ('value_of_block_commission', 2.1099999999999999), ('percentage_cost', 0), ('value_of_pertrade_commission', 0)])

------------------------------------------------------------

data.get_raw_price(instrument_code='EDOLLAR')
returns a Pandas Series of prices and timestamps for a given instrument. Example:
2015-12-11 12:00:25    97.9125
2015-12-11 14:11:34    97.9525
2015-12-11 15:39:37    97.9425
2015-12-11 17:08:14    97.9675
2015-12-11 19:33:39    97.9875
Name: price, dtype: float64

------------------------------------------------------------

data.get_instrument_raw_carry_data(instrument_code='EDOLLAR') for futures trading
returns a Pandas DataFrame
PRICE CARRY CARRY_CONTRACT PRICE_CONTRACT for a given instrument. Example:
                       PRICE  CARRY CARRY_CONTRACT PRICE_CONTRACT
2015-12-11 14:11:34  97.9525    NaN         201812         201903
2015-12-11 15:39:37  97.9425    NaN         201812         201903
2015-12-11 17:08:14  97.9675    NaN         201812         201903
2015-12-11 19:33:39  97.9875    NaN         201812         201903

------------------------------------------------------------

data._get_instrument_data()
returns a Pandas DataFrame
with information about instruments. Example::
           Instrument  Pointsize AssetClass Currency  Shortonly
Instrument                                                     
EDOLLAR       EDOLLAR       2500       STIR      USD      False
US10             US10       1000       Bond      USD      False
BUND             BUND       1000       Bond      EUR      False

------------------------------------------------------------

data.get_instrument_list()
returns a list of strings
with the instruments. Example::
['EDOLLAR', 'US10', 'BUND']

------------------------------------------------------------

data._get_fx_data('EUR', 'USD')
returns a Pandas DataFrame or none if not available
currency 1: numerator.
currency2: denominator. Example:
2015-12-07    1.08703
2015-12-08    1.08571
2015-12-09    1.09085
2015-12-10    1.09641
Name: FX, dtype: float64

------------------------------------------------------------

System forecasting.

------------------------------------------------------------

 {'rule0': TradingRule; function: <function ewmac_forecast_with_defaults at 0x000002940E1AC158>, data:  and other_args: }
------------------------------------------------------------

 {'ewmac': TradingRule; function: <function ewmac_forecast_with_defaults at 0x000002940E1AC158>, data:  and other_args: }
------------------------------------------------------------

 System with .config, .data, and .stages: rules
------------------------------------------------------------

my_system.rules.get_raw_forecast('EDOLLAR', 'ewmac')
returns a Pandas DataFrame with the forecast of each day
Example:
2015-12-07    2.303484
2015-12-08    2.345404
2015-12-09    2.398515
2015-12-10    2.289017
2015-12-11    2.138422
Freq: B, dtype: float64

------------------------------------------------------------
TradingRule; function: <function ewmac_forecast_with_defaults at 0x000002940E1AC158>, data:  and other_args: 
------------------------------------------------------------
System position features.
------------------------------------------------------------

my_system.positionSize.get_price_volatility('EDOLLAR')
returns a Pandas DataFrame with the price volatility of each day
Example:
2015-12-07    0.057630
2015-12-08    0.056030
2015-12-09    0.054418
2015-12-10    0.055318
2015-12-11    0.059724
Freq: B, dtype: float64

------------------------------------------------------------
Daily cash volume target:
{'base_currency': 'USD', 'percentage_vol_target': 16.0, 'notional_trading_capital': 1000000.0, 'annual_cash_vol_target': 160000.0, 'daily_cash_vol_target': 10000.0}
------------------------------------------------------------
